name: Build and deploy to AWS

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v2
      - name: Configure credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            infra:
              - 'infrastructure/terraform/**'
            backend:
              - 'infrastructure/lambdas/**'
            frontend:
              - '_includes/**'
              - '_layouts/**'
              - '_posts/**'
              - '_sass/**'
              - 'assets/**'
              - '*.md'
              - '_config.yml'

      - name: Apply infrastructure changes
        if: steps.filter.outputs.infra == 'true'
        run: |
          set -e

          cd infrastructure/terraform
          terraform init -backend-config=backend.hcl
          terraform apply -auto-approve

          aws sns publish --topic-arn arn:aws:sns:eu-central-1:661982601103:GeneralNotifications \
            --message "The infrastructure was deployed successfully!"

      - name: Build lambdas image
        if: steps.filter.outputs.backend == 'true'
        run: |
          set -e

          cd infrastructure/lambdas/

          aws ecr get-login-password | \
            docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/lambdas-common:latest .
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/lambdas-common:latest

          for lambda in $(cat ../terraform/lambdas.tf | grep function_name | grep local | grep -v \# | grep -o '[^-]\+$' | tr -d /'"'//);
          do
            aws lambda update-function-code --function-name "dev-$lambda" \
              --image-uri ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/lambdas-common:latest
          done

          aws sns publish --topic-arn arn:aws:sns:eu-central-1:661982601103:GeneralNotifications \
            --message "The lambdas were deployed successfully!"

      - name: Apply site changes
        if: steps.filter.outputs.frontend == 'true'
        run: |
          set -e

          sudo gem install jekyll jekyll-timeago rouge
          jekyll build -d public
          cd public && zip -r ../frontend-artifact.zip . && cd ..
          aws s3 cp frontend-artifact.zip s3://${{ secrets.AWS_CODEPIPEILINE_BUCKET }}/

